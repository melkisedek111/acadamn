// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                   @id @default(autoincrement())
  firstName               String
  middleName              String?
  lastName                String
  dateOfBirth             String
  role                    String
  gender                  String
  province                String
  barangay                String
  municipality            String
  password                String
  studentIdentificationId Int                   @unique()
  studentIdentification   StudentIdentification @relation(fields: [studentIdentificationId], references: [id])
  email                   String                @unique()
  Exam                    Exam[]
  UserExam                UserExam[]
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  InstructorSubjects      InstructorSubjects[]
}

model Subject {
  id                 Int                  @id @default(autoincrement())
  name               String
  code               String
  description        String
  day                String[]
  startTime          String
  endTime            String
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Exam               Exam[]
  InstructorSubjects InstructorSubjects[]
}

model Exam {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  user               User                 @relation(fields: [userId], references: [id])
  subjectId          Int
  subject            Subject              @relation(fields: [subjectId], references: [id])
  description        String
  title              String
  scheduleDate       DateTime
  startTime          String
  endTime            String
  type               String
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  UserExam           UserExam[]
  ExamItem           ExamItem[]
  UserExamAnswerItem UserExamAnswerItem[]
}

model UserExam {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  examId    Int
  exam      Exam     @relation(fields: [examId], references: [id])
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExamItem {
  id                 Int                  @id @default(autoincrement())
  itemCodeId         String?
  hasCode            Boolean
  code               String?
  codeLanguage       String?
  itemType           String
  question           String
  optionType         String
  options            String[]
  answers            String[]
  examId             Int
  exam               Exam                 @relation(fields: [examId], references: [id])
  images             String[]
  isDeleted          Boolean              @default(false)
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  UserExamAnswerItem UserExamAnswerItem[]
}

model UserExamAnswerItem {
  id         Int      @id @default(autoincrement())
  answers    Json
  examItemId Int
  examItem   ExamItem @relation(fields: [examItemId], references: [id])
  examId     Int
  exam       Exam     @relation(fields: [examId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model StudentIdentification {
  id           Int      @id @default(autoincrement())
  studentId    String   @unique()
  blockId      Int?
  block        Block?   @relation(fields: [blockId], references: [id])
  yearLevel    Int?
  isRegistered Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User?
}

model Block {
  id                    Int                     @id @default(autoincrement())
  name                  String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  StudentIdentification StudentIdentification[]
}

model InstructorSubjects {
  id        Int      @id @default(autoincrement())
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
